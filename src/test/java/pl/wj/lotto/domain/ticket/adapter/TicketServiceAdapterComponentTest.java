package pl.wj.lotto.domain.ticket.adapter;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import pl.wj.lotto.domain.common.drawdatetime.DrawDateTimeChecker;
import pl.wj.lotto.domain.common.drawdatetime.port.in.DrawDateTimeCheckerPort;
import pl.wj.lotto.domain.common.gametype.GameType;
import pl.wj.lotto.domain.common.gametype.GameTypeSettingsContainer;
import pl.wj.lotto.domain.common.notification.NotificationPort;
import pl.wj.lotto.domain.common.numbers.NumbersGenerator;
import pl.wj.lotto.domain.common.numbers.NumbersValidator;
import pl.wj.lotto.domain.common.numbers.model.Numbers;
import pl.wj.lotto.domain.common.numbers.port.in.NumbersGeneratorPort;
import pl.wj.lotto.domain.common.numbers.port.in.NumbersValidatorPort;
import pl.wj.lotto.domain.common.numbersreceiver.NumbersReceiverPort;
import pl.wj.lotto.domain.draw.model.Draw;
import pl.wj.lotto.domain.draw.model.dto.DrawWinningNumbersDto;
import pl.wj.lotto.domain.draw.port.out.DrawRepositoryPort;
import pl.wj.lotto.domain.ticket.mapper.TicketMapper;
import pl.wj.lotto.domain.ticket.model.Ticket;
import pl.wj.lotto.domain.ticket.model.dto.PlayerNumbersDto;
import pl.wj.lotto.domain.ticket.model.dto.TicketRequestDto;
import pl.wj.lotto.domain.ticket.model.dto.TicketResponseDto;
import pl.wj.lotto.domain.ticket.port.in.TicketServicePort;
import pl.wj.lotto.domain.ticket.port.out.TicketRepositoryPort;
import pl.wj.lotto.domain.ticket.service.TicketService;
import pl.wj.lotto.domain.user.adapter.UserServiceAdapter;
import pl.wj.lotto.domain.user.port.in.UserServicePort;
import pl.wj.lotto.domain.user.service.UserService;
import pl.wj.lotto.infrastructure.application.clock.config.ClockFakeConfig;
import pl.wj.lotto.infrastructure.gametype.GameTypeFakeConfig;
import pl.wj.lotto.infrastructure.notification.fake.email.EmailNotificationFakeAdapter;
import pl.wj.lotto.infrastructure.notification.fake.sms.SMSNotificationFakeAdapter;
import pl.wj.lotto.infrastructure.numbersreceiver.fake.NumbersReceiverFakeAdapter;
import pl.wj.lotto.infrastructure.persistence.fake.draw.DrawFakeAdapter;
import pl.wj.lotto.infrastructure.persistence.fake.ticket.TicketFakeAdapter;
import pl.wj.lotto.infrastructure.persistence.fake.user.UserFakeAdapter;

import java.time.Clock;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertAll;

class TicketServiceAdapterComponentTest {
    private TicketRepositoryPort ticketRepositoryPort;
    private UserServicePort userServicePort;
    private DrawRepositoryPort drawRepositoryPort;
    private TicketServicePort ticketServicePort;

    private Clock clock;

    @BeforeEach
    void setUp() {
        clock = new ClockFakeConfig().clock();
        NumbersReceiverPort numbersReceiverPort = new NumbersReceiverFakeAdapter();
        GameTypeSettingsContainer gameTypeSettingsContainer = new GameTypeFakeConfig().gameTypeSettingsContainer();
        NumbersGeneratorPort numbersGeneratorPort = new NumbersGenerator(numbersReceiverPort, gameTypeSettingsContainer);
        NumbersValidatorPort numbersValidatorPort = new NumbersValidator(gameTypeSettingsContainer);
        DrawDateTimeCheckerPort drawDateTimeCheckerPort = new DrawDateTimeChecker(clock, gameTypeSettingsContainer);
        drawRepositoryPort = new DrawFakeAdapter();
        ticketRepositoryPort = new TicketFakeAdapter();
        UserService userService = new UserService(new UserFakeAdapter(), new BCryptPasswordEncoder());
        userServicePort = new UserServiceAdapter(userService);
        NotificationPort emailNotificationPort = new EmailNotificationFakeAdapter();
        NotificationPort smsNotificationPort = new SMSNotificationFakeAdapter();
        TicketService ticketService = new TicketService(
                clock, ticketRepositoryPort, userServicePort,
                drawDateTimeCheckerPort, numbersGeneratorPort, numbersValidatorPort,
                emailNotificationPort, smsNotificationPort);
        ticketServicePort = new TicketServiceAdapter(ticketService);
    }

    @Test
    void shouldReturnTicketResponseDtoListOfSpecificUser() {
        // given
        String userId = "some-user-id";
        TicketRequestDto ticketRequestDto;
        ticketRequestDto = TicketRequestDto.builder()
                .userId("")
                .gameTypeId(GameType.LOTTO.getId())
                .drawsAmount(1)
                .numbersAutogenerated(true)
                .mainNumbers(List.of(1,2,3,4,5,6))
                .build();
        Ticket ticket = TicketMapper.toTicket(ticketRequestDto);
        ticket.setGenerationDateTime(LocalDateTime.now(clock));
        ticketRepositoryPort.save(ticket);
        ticketRequestDto = TicketRequestDto.builder()
                .userId("some-other-user-id")
                .gameTypeId(GameType.LOTTO.getId())
                .drawsAmount(1)
                .numbersAutogenerated(true)
                .mainNumbers(List.of(1,2,3,4,5,6))
                .build();
        ticket = TicketMapper.toTicket(ticketRequestDto);
        ticket.setGenerationDateTime(LocalDateTime.now(clock));
        ticketRepositoryPort.save(ticket);
        ticketRequestDto = TicketRequestDto.builder()
                .userId(userId)
                .gameTypeId(GameType.LOTTO.getId())
                .drawsAmount(1)
                .numbersAutogenerated(true)
                .mainNumbers(List.of(1,2,3,4,5,6))
                .build();
        ticket = TicketMapper.toTicket(ticketRequestDto);
        ticket.setGenerationDateTime(LocalDateTime.now(clock));
        ticketRepositoryPort.save(ticket);
        ticketRequestDto = TicketRequestDto.builder()
                .userId(userId)
                .gameTypeId(GameType.LOTTO.getId())
                .drawsAmount(1)
                .numbersAutogenerated(true)
                .mainNumbers(List.of(1,2,3,4,5,6))
                .build();
        ticket = TicketMapper.toTicket(ticketRequestDto);
        ticket.setGenerationDateTime(LocalDateTime.now(clock));
        ticketRepositoryPort.save(ticket);

        // when
        List<TicketResponseDto> result = ticketServicePort.getUserTickets(userId);

        // then
        assertAll(
                () -> assertThat(result).isNotNull().hasSize(2),
                () -> assertThat(result.stream().map(TicketResponseDto::userId).toList()).containsOnly(userId)
        );
    }

    @Test
    void shouldReturnPlayersDrawNumbersForGivenDrawResult() {
        // given
        LocalDateTime now = LocalDateTime.now(clock);
        GameType gameType = GameType.LOTTO;
        List<Integer> winningNumbers = List.of(1,2,3,4,5,6);
        List<PlayerNumbersDto> expectedResult = new ArrayList<>();
        DrawWinningNumbersDto drawWinningNumbersDto = DrawWinningNumbersDto.builder()
                .type(gameType)
                .drawDateTime(now)
                .numbers(Numbers.builder()
                        .gameType(gameType)
                        .mainNumbers(winningNumbers)
                        .build())
                .build();
        drawRepositoryPort.save(
                Draw.builder()
                        .type(gameType)
                        .drawDateTime(now)
                        .numbers(Numbers.builder()
                                .gameType(gameType)
                                .mainNumbers(winningNumbers)
                                .build())
                        .build());
        Ticket ticket = ticketRepositoryPort.save(
                Ticket.builder()
                        .userId("some-user-id")
                        .gameType(gameType)
                        .drawsAmount(1)
                        .numbers(Numbers.builder()
                                .gameType(gameType)
                                .mainNumbers(winningNumbers)
                                .build())
                        .generationDateTime(now.minusHours(2))
                        .lastDrawDateTime(now.plusHours(2))
                        .build());
        expectedResult.add(
                PlayerNumbersDto.builder()
                        .userId(ticket.getUserId())
                        .gameType(gameType)
                        .mainNumbers(ticket.getNumbers().mainNumbers())
                .build());
        ticket = ticketRepositoryPort.save(
                Ticket.builder()
                        .userId("some-user-id")
                        .gameType(gameType)
                        .drawsAmount(1)
                        .numbers(Numbers.builder()
                                .gameType(gameType)
                                .mainNumbers(List.of(1,2,3,4,5,7))
                                .build())
                        .generationDateTime(now.minusHours(1))
                        .lastDrawDateTime(now.plusHours(2))
                        .build());
        expectedResult.add(
                PlayerNumbersDto.builder()
                        .userId(ticket.getUserId())
                        .gameType(gameType)
                        .mainNumbers(ticket.getNumbers().mainNumbers())
               .build());

        // when
        List<PlayerNumbersDto> result = ticketServicePort.getPlayersDrawNumbers(drawWinningNumbersDto);

        // then
        assertThat(result)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrderElementsOf(expectedResult);
    }

    @Test
    void shouldReturnTicketByGivenId() {
        // given
        GameType gameType = GameType.LOTTO;
        LocalDateTime now = LocalDateTime.now(clock);
        Ticket expectedResult = ticketRepositoryPort.save(
                Ticket.builder()
                        .userId("some-user-id")
                        .gameType(gameType)
                        .drawsAmount(1)
                        .numbers(Numbers.builder()
                                .gameType(gameType)
                                .mainNumbers(List.of(1,2,3,4,5,6))
                                .build())
                        .generationDateTime(now.minusHours(2))
                        .lastDrawDateTime(now.plusHours(2))
                        .build());
        String ticketId = expectedResult.getId();

        // when
        Ticket result = ticketServicePort.getTicket(ticketId);

        // then
        assertThat(result)
                .usingRecursiveComparison()
                .isEqualTo(expectedResult);
    }
}