package pl.wj.lotto.domain.ticket.service;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import pl.wj.lotto.domain.common.drawingtype.DrawingType;
import pl.wj.lotto.domain.common.notification.NotificationPort;
import pl.wj.lotto.domain.ticket.mapper.TicketMapper;
import pl.wj.lotto.domain.ticket.model.dto.TicketRequestDto;
import pl.wj.lotto.domain.ticket.model.dto.TicketResponseDto;
import pl.wj.lotto.domain.ticket.port.out.TicketRepositoryPort;

@ExtendWith(MockitoExtension.class)
class TicketServiceTest {
    @Mock
    private NotificationPort notificationPort;
    @Mock
    private TicketRepositoryPort ticketRepositoryPort;
    @InjectMocks
    private TicketService ticketService;

    @Test
    private void shouldAddNewTicketWhenThereIsUserId() {
        // given
        DrawingType drawingType = DrawingType.LOTTO;
        TicketRequestDto ticketRequestDto = TicketRequestDto.builder()
                .userId("some-user-id")
                .drawingTypeId(drawingType.getId())
                .numberOfDrawings(1)
                .numbersAutogenerated(true)
                .build();
        TicketResponseDto expectedResponse = TicketMapper.toTicketResponseDto(ticketRequestDto);

        // when

        // then
    }


}