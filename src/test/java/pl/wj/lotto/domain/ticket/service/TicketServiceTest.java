package pl.wj.lotto.domain.ticket.service;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import pl.wj.lotto.domain.common.drawdatetime.model.DrawDateTime;
import pl.wj.lotto.domain.common.gametype.GameType;
import pl.wj.lotto.domain.common.gametype.GameTypeSettingsContainer;
import pl.wj.lotto.domain.common.notification.NotificationPort;
import pl.wj.lotto.domain.common.numbers.Numbers;
import pl.wj.lotto.domain.common.numbersgenerator.NumbersGeneratorPort;
import pl.wj.lotto.domain.draw.port.in.DrawServicePort;
import pl.wj.lotto.domain.ticket.model.Ticket;
import pl.wj.lotto.domain.ticket.model.dto.TicketRequestDto;
import pl.wj.lotto.domain.ticket.model.dto.TicketResponseDto;
import pl.wj.lotto.domain.ticket.port.out.TicketRepositoryPort;

import java.time.LocalDateTime;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.BDDMockito.given;

@ExtendWith(MockitoExtension.class)
class TicketServiceTest {
    @Mock
    private TicketRepositoryPort ticketRepositoryPort;
    @Mock
    private NotificationPort notificationPort;
    @Mock
    private NumbersGeneratorPort numbersGeneratorPort;
    @Mock
    private DrawServicePort drawServicePort;
    @InjectMocks
    private TicketService ticketService;

    @Test
    void shouldAddNewTicketWhenThereIsUserId() {
        // given
        GameType gameType = GameType.LOTTO;
        LocalDateTime generationTime = LocalDateTime.now();
        LocalDateTime nextDrawDateTime = LocalDateTime.now().plusDays(1);
        String userId = "some-user-id";
        String id = "some-id";
        TicketRequestDto ticketRequestDto = TicketRequestDto.builder()
                .userId(userId)
                .gameTypeId(gameType.getId())
                .numberOfDraws(1)
                .numbersAutogenerated(true)
                .build();
        List<Integer> mainNumbers = List.of(1,2,3,4,5,6);
        Numbers numbers = Numbers.builder()
                .gameType(gameType)
                .drawDateTime(GameTypeSettingsContainer.getGameTypeSettings(gameType).drawDateTime())
                .mainNumbers(mainNumbers)
                .build();
        TicketResponseDto expectedResult = TicketResponseDto.builder()
                .id(id)
                .userId(userId)
                .gameTypeName(gameType.getName())
                .numberOfDraws(1)
                .numbers(numbers)
                .generationTime(generationTime)
                .nextDrawDateTime(nextDrawDateTime)
                .build();
        given(numbersGeneratorPort.generate(anyInt(), anyInt(), anyInt())).willReturn(mainNumbers);
        given(ticketRepositoryPort.save(any(Ticket.class))).willAnswer(
                i -> {
                    Ticket t = i.getArgument(0, Ticket.class);
                    t.setId(id);
                    t.setGenerationTime(generationTime);
                    return t;
                });
        given(drawServicePort.getNextDrawDateTime(any(DrawDateTime.class))).willReturn(nextDrawDateTime);

        // when
        TicketResponseDto result = ticketService.addTicket(ticketRequestDto);

        // then
        assertThat(result)
                .usingRecursiveComparison()
                .isEqualTo(expectedResult);
    }

}