package pl.wj.lotto.domain.ticket.service;

import lombok.RequiredArgsConstructor;
import pl.wj.lotto.domain.common.drawdatetime.port.in.DrawDateTimeCheckerPort;
import pl.wj.lotto.domain.common.notification.NotificationPort;
import pl.wj.lotto.domain.common.numbers.model.Numbers;
import pl.wj.lotto.domain.common.numbers.port.in.NumbersGeneratorPort;
import pl.wj.lotto.domain.common.numbers.port.in.NumbersValidatorPort;
import pl.wj.lotto.domain.draw.model.dto.DrawResultDto;
import pl.wj.lotto.domain.ticket.mapper.TicketMapper;
import pl.wj.lotto.domain.ticket.model.Ticket;
import pl.wj.lotto.domain.ticket.model.dto.PlayerNumbersDto;
import pl.wj.lotto.domain.ticket.model.dto.TicketRequestDto;
import pl.wj.lotto.domain.ticket.model.dto.TicketResponseDto;
import pl.wj.lotto.domain.ticket.port.out.TicketRepositoryPort;
import pl.wj.lotto.infrastructure.application.exception.definition.NumbersValidationException;
import pl.wj.lotto.infrastructure.application.exception.definition.ResourceNotFoundException;
import pl.wj.lotto.infrastructure.persistence.database.ticket.entity.TicketEntity;

import java.time.Clock;
import java.time.LocalDateTime;
import java.util.List;

@RequiredArgsConstructor
public class TicketService {
    private final Clock clock;
    private final TicketRepositoryPort ticketRepositoryPort;
    private final DrawDateTimeCheckerPort drawDateTimeCheckerPort;
    private final NumbersGeneratorPort numbersGeneratorPort;
    private final NumbersValidatorPort numbersValidatorPort;
    private NotificationPort notificationPort;

    public TicketResponseDto addTicket(TicketRequestDto ticketRequestDto) {
        Ticket ticket = TicketMapper.toTicket(ticketRequestDto);
        if (ticketRequestDto.numbersAutogenerated()) {
            Numbers numbers = numbersGeneratorPort.generate(ticket.getGameType(), true);
            ticket.setNumbers(numbers);
        } else if (!numbersValidatorPort.validate(ticket.getNumbers())) {
            throw new NumbersValidationException("Given numbers are invalid");
        }

        ticket.setGenerationDateTime(LocalDateTime.now(clock));
        LocalDateTime lastDrawDateTime = drawDateTimeCheckerPort.getLastDrawDateTimeForTicket(ticket.getGameType(), ticket.getNumberOfDraws(), ticket.getGenerationDateTime());
        ticket.setLastDrawDateTime(lastDrawDateTime);
        ticket.setGenerationDateTime(LocalDateTime.now(clock));
        ticket = ticketRepositoryPort.save(ticket);
        if (ticket.getUserId() != null && !ticket.getUserId().isBlank()) {
            // TODO: get user email address and user notification settings by user id and send messages
//            NotificationSettings notificationSettings = userServicePort.getNotificationSettings();
//            if (notificationSettings.contains("SMS")) {
//                notificationPort = new SmsNotificationAdapter();
//                notificationPort.send("700700700", "Message");
//            }
//            if (notificationSettings.contains("EMAIL")) {
//                notificationPort = new SmsNotificationAdapter();
//                notificationPort.send("email@email.com", "Message");
//            }
        } else {
            ticket.setUserId("");
        }
        TicketResponseDto ticketResponseDto = TicketMapper.toTicketResponseDto(ticket);
        LocalDateTime nextDrawDateTime = drawDateTimeCheckerPort.getNextDrawDateTime(ticket.getGameType());
        return ticketResponseDto.withNextDrawDateTime(nextDrawDateTime);
    }

    public List<TicketResponseDto> getUserTickets(String userId) {
        List<Ticket> tickets = ticketRepositoryPort.getByUserId(userId);
        List<TicketResponseDto> ticketResponseDtos = TicketMapper.toTicketResponseDtos(tickets);
        return ticketResponseDtos.stream().map(tr -> tr.withNextDrawDateTime(
                drawDateTimeCheckerPort.getNextDrawDateTimeForTicket(tr.numbers().gameType(), tr.generationDateTime()))).toList();
    }

    public List<PlayerNumbersDto> getPlayersDrawNumbers(DrawResultDto drawResultDto) {
        List<TicketEntity> ticketEntities = ticketRepositoryPort.getPlayersDrawNumbersByGameTypeAndLastDrawDateTime(
                drawResultDto.type(), drawResultDto.drawDateTime());
        return TicketMapper.toPlayerNumbersDtos(ticketEntities);
    }

    public Ticket getTicket(String ticketId) {
        TicketEntity ticketEntity = ticketRepositoryPort.findById(ticketId).orElseThrow(() -> new ResourceNotFoundException("Ticket not found"));
        return TicketMapper.toTicket(ticketEntity);
    }
}
