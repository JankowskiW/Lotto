package pl.wj.lotto.domain.ticket.service;

import lombok.RequiredArgsConstructor;
import pl.wj.lotto.domain.common.gametype.GameType;
import pl.wj.lotto.domain.common.gametype.GameTypeSettingsContainer;
import pl.wj.lotto.domain.common.notification.NotificationPort;
import pl.wj.lotto.domain.common.numbers.Numbers;
import pl.wj.lotto.domain.common.numbers.NumbersValidator;
import pl.wj.lotto.domain.common.numbersgenerator.NumbersGeneratorPort;
import pl.wj.lotto.domain.draw.port.in.DrawServicePort;
import pl.wj.lotto.domain.ticket.mapper.TicketMapper;
import pl.wj.lotto.domain.ticket.model.Ticket;
import pl.wj.lotto.domain.ticket.model.dto.TicketRequestDto;
import pl.wj.lotto.domain.ticket.model.dto.TicketResponseDto;
import pl.wj.lotto.domain.ticket.port.out.TicketRepositoryPort;

import java.time.LocalDateTime;
import java.util.List;

@RequiredArgsConstructor
public class TicketService {
    private final TicketRepositoryPort ticketRepositoryPort;
    private final NotificationPort notificationPort;
    private final NumbersGeneratorPort numbersGeneratorPort;
    private final DrawServicePort drawServicePort;

    public TicketResponseDto addTicket(TicketRequestDto ticketRequestDto) {
        Ticket ticket = TicketMapper.toTicket(ticketRequestDto);
        if (ticketRequestDto.numbersAutogenerated())
            ticket.setNumbers(generateNumbers(ticket.getGameType()));
        ticket = ticketRepositoryPort.save(ticket);
        if (ticket.getUserId() != null && !ticket.getUserId().isBlank()) {
            notificationPort.send("email@email.com", "Message");
        } else {
            ticket.setUserId("");
        }
        TicketResponseDto ticketResponseDto = TicketMapper.toTicketResponseDto(ticket);
        LocalDateTime nextDrawTime = drawServicePort.getNextDrawTime(ticket.getNumbers().drawTime());
        return ticketResponseDto.withNextDrawTime(nextDrawTime);
    }

    public List<TicketResponseDto> getTicketsByUserId(String userId) {
        List<Ticket> tickets = ticketRepositoryPort.getByUserId(userId);
        // TODO: Create method which gets next draw time for specific draw type somewhere and call it here
        return TicketMapper.toTicketResponseDtos(tickets);
    }

    private Numbers generateNumbers(GameType gameType) {
        List<Integer> mainNumbers = numbersGeneratorPort.generate(1,1,1);
        List<Integer> extraNumbers = null;
        if (gameType == GameType.EJP) {
            extraNumbers = numbersGeneratorPort.generate(1,1,1);
        }
        NumbersValidator numbersValidator = new NumbersValidator();
        if (!numbersValidator.validate(gameType, mainNumbers, extraNumbers)) {
            throw new RuntimeException("Generated numbers are invalid");
        }

        return Numbers.builder()
                .gameType(gameType)
                .drawTime(GameTypeSettingsContainer.getGameTypeSettings(gameType).drawTime())
                .mainNumbers(mainNumbers)
                .extraNumbers(extraNumbers)
                .build();
    }
}
