package pl.wj.lotto.domain.ticket.service;

import lombok.RequiredArgsConstructor;
import pl.wj.lotto.domain.common.drawingtype.DrawingType;
import pl.wj.lotto.domain.common.notification.NotificationPort;
import pl.wj.lotto.domain.common.numbersgenerator.NumbersGeneratorPort;
import pl.wj.lotto.domain.common.numberstemplate.NumberTemplateCreator;
import pl.wj.lotto.domain.common.numberstemplate.NumbersTemplate;
import pl.wj.lotto.domain.drawing.port.in.DrawingServicePort;
import pl.wj.lotto.domain.ticket.mapper.TicketMapper;
import pl.wj.lotto.domain.ticket.model.Ticket;
import pl.wj.lotto.domain.ticket.model.dto.TicketRequestDto;
import pl.wj.lotto.domain.ticket.model.dto.TicketResponseDto;
import pl.wj.lotto.domain.ticket.port.out.TicketRepositoryPort;

import java.time.LocalDateTime;
import java.util.List;

@RequiredArgsConstructor
public class TicketService {
    private final TicketRepositoryPort ticketRepositoryPort;
    private final NotificationPort notificationPort;
    private final NumbersGeneratorPort numbersGeneratorPort;
    private final DrawingServicePort drawingServicePort;

    public TicketResponseDto addTicket(TicketRequestDto ticketRequestDto) {
        Ticket ticket = TicketMapper.toTicket(ticketRequestDto);
        if (ticketRequestDto.numbersAutogenerated())
            ticket.setNumbers(generateNumbers(ticket.getDrawingType()));
        ticket = ticketRepositoryPort.save(ticket);
        if (ticket.getUserId() != null && !ticket.getUserId().isBlank()) {
            notificationPort.send("email@email.com", "Message");
        } else {
            ticket.setUserId("");
        }
        TicketResponseDto ticketResponseDto = TicketMapper.toTicketResponseDto(ticket);
        LocalDateTime nextDrawingTime = drawingServicePort.getNextDrawingTime(ticket.getNumbers());
        return ticketResponseDto.withNextDrawingTime(nextDrawingTime);
    }

    public List<TicketResponseDto> getTicketsByUserId(String userId) {
        List<Ticket> tickets = ticketRepositoryPort.getByUserId(userId);
        // TODO: Create method which gets next drawing time for specific drawing type somewhere and call it here
        return TicketMapper.toTicketResponseDtos(tickets);
    }

    private NumbersTemplate generateNumbers(DrawingType drawingType) {
        NumbersTemplate numbers = NumberTemplateCreator.createNumbersTemplateByDrawingType(drawingType);
        List<Integer> mainNumbers = numbersGeneratorPort.generate(1,1,1);
        List<Integer> extraNumbers = null;
        if (drawingType == DrawingType.EJP) {
            extraNumbers = numbersGeneratorPort.generate(1,1,1);
        }
        numbers.setNumbers(mainNumbers, extraNumbers);
        return numbers;
    }
}
