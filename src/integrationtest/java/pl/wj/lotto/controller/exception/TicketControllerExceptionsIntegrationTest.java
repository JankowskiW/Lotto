package pl.wj.lotto.controller.exception;

import org.junit.jupiter.api.Test;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.ResultActions;
import org.testcontainers.containers.MongoDBContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.utility.DockerImageName;
import pl.wj.lotto.BaseIntegrationTest;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

public class TicketControllerExceptionsIntegrationTest extends BaseIntegrationTest {
    private static final String CONTENT_TYPE = MediaType.APPLICATION_JSON_VALUE;
    private static final String TICKETS_URL = "/tickets";

    @Container
    public static final MongoDBContainer mongoDBContainer = new MongoDBContainer(DockerImageName.parse("mongo:4.0.10"));
    @DynamicPropertySource
    public static void propertyOverride(DynamicPropertyRegistry registry) {
        registry.add("spring.data.mongodb.uri", mongoDBContainer::getReplicaSetUrl);
    }

    @Test
    @WithMockUser
    void shouldReturnBadRequestStatusWhenGivenNumbersAreInvalid() throws Exception {
        String requestBody = """
                {
                    "userId" : "some-user-id",
                    "gameTypeId" : 1,
                    "drawsAmount" : 1,
                    "numbersAutogenerated" : false,
                    "mainNumbers" : [100,200,300,400,500,600]
                }
                """.trim();
        RequestBuilder postAddTicketRequestBuilder =
                post(TICKETS_URL).contentType(CONTENT_TYPE).content(requestBody);
        // when
        ResultActions postAddTicketResult = mockMvc.perform(postAddTicketRequestBuilder);
        // then
        postAddTicketResult.andExpect(status().isBadRequest());
    }
}
